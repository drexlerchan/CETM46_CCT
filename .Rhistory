shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('Test46')
runApp('Test46')
runApp('Test46')
if (interactive()) {
library(shiny.semantic)
# basic example
shinyApp(
ui = semanticPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
}
paste("You chose", input$state)
runApp()
runApp()
shiny::runApp()
runApp()
# basic example
shinyApp(
ui = fluidPage(
box(
title = "Diamonds",
solidHeader = TRUE,
selectInput("cut", "Cut", levels(diamonds$cut)),
selectInput("color", "Color", levels(diamonds$color)),
selectInput("clarity", "Clarity", levels(diamonds$clarity)),
actionButton("update", "Update Plot")
),
box(
title = "Plot",
solidHeader = TRUE,
textOutput("title"),
plotOutput("plot")
)
),
server <- function(input, output, session) {
output$plot <- renderPlot({
data <- filter(diamonds,
cut == input$cut,
color == input$color,
clarity == input$clarity)
ggplot(data, aes(carat, price)) +
geom_point(color = "#605CA8", alpha = 0.5) +
geom_smooth(method = lm, color = "#605CA8")
})
output$title <- renderText({
input$update # just here to trigger the function
sprintf("Cut: %s, Color: %s, Clarity: %s",
input$cut,
input$color,
input$clarity)
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ranger)     # for faster implementaion of random forests
library(caret)
library(caTools)    # for splitting data into training and test set
library(data.table) # for converting data frame to table for faster execution
library(ggplot2)    # for basic plot
library(corrplot)   # for plotting corelation plot between elements
library(Rtsne)      # for plotting tsne model
library(ROSE)       # for rose sampling
library(pROC)       # for plotting ROC curve
library(rpart)      # for regression trees
library(rpart.plot) # for plotting decision tree
library(Rborist)    # for random forest model
library(xgboost)
library(glmnet)
library(GGally)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(dplyr)
library(ranger)     # for faster implementaion of random forests
library(caret)
library(caTools)    # for splitting data into training and test set
library(data.table) # for converting data frame to table for faster execution
library(ggplot2)    # for basic plot
library(corrplot)   # for plotting corelation plot between elements
library(Rtsne)      # for plotting tsne model
library(ROSE)       # for rose sampling
library(pROC)       # for plotting ROC curve
library(rpart)      # for regression trees
library(rpart.plot) # for plotting decision tree
library(Rborist)    # for random forest model
library(xgboost)
library(glmnet)
#dataset <- setDT(read.csv("card_transdata.csv"))
dataset <- read.csv("assign_data.csv")
ggplot(dataset, aes(x = Year, y = HK)) +
geom_point() +
stat_smooth(method="lm")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
